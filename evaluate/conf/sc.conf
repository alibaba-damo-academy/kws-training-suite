#
# HI-MIA 配置文件。
# 2022-08-26
#


##############################
#
# 公共参数
#

# 输入信号的采样率（Hz），支持16000，32000，和48000的输入。
fsin = 16000

# 输出信号的采样率（Hz），支持16000的输出。
fsout = 16000

# 输入信号每个采样点所占的bit数，支持16、24、和32bit（int）。
nbitsin = 16

# 输出信号每个采样点所占的bit数，支持16、24、和32bit（int）。大多数后端识别器采用的是16bit的格式。
nbitsout = 16

#
# 数据块类型，0表示使用默认值。该参数控制输入和输出数据块的类型和长度，目前支持的类型有：
# 0 (BLOCK_DEFAULT): 默认数据块。
# 100 (BLOCK_10MS): 10ms数据块。
# 101 (BLOCK_10MS_LD): 10ms数据块，性能更好但延时更大。
# 160 (BLOCK_16MS): 16ms数据块。
# 161 (BLOCK_16MS_LD): 16ms数据块，性能更好但延时更大。
# 200 (BLOCK_20MS): 20ms数据块。
# 201 (BLOCK_20MS_LD): 20ms数据块，性能更好但延时更大。
#
block_type = 0

# MIC通道数
nummics = ${nummics}

# 参考通道数
numrefs = ${numrefs}

# 外部多模态信息通道数。该信息相当于外部（例如视频信息）获得的目标存在概率（取值范围[0, 1]），用于辅助对感兴趣的目标信号进行增强。
numpilots = 0

#
# 当该参数为1时，多模态信息当作音频输入，调用process()函数的音频数据应包含mic、参考、和多模态信息；当该参数为0时，不从音频中解析
# 多模态信息，而多模态信息需要在process()之前通过setPilots()函数传入，调用process()函数的音频数据只包含mic和参考。
#
pilots_as_audio = 1

#
# 输入通道数。当不设置该参数，或该参数值小于nummics+numrefs+numpilots（pilots_as_audio = 1）时，所使用的输入通道总数为
# nummics+numrefs+numpilots（pilots_as_audio = 1）。
#
numins = ${numins}

#
# 用于处理的通道序号，通道之间用英文逗号（,）隔开，通道序号从0开始。需要将输入调整为mic通道、参考通道、多模态通道（pilots_as_audio = 1）
# 的顺序。如果不设置该参数，则默认按顺序选择nummics+numrefs+numpilots（pilots_as_audio = 1）个通道用于处理。除了多模态通道外支持通道合
# 并，以应对高低音参考分频的问题，需要合并的通道之间用加号（+）隔开。例如，现有8通道的音频文件，音频中4至7通道为mic通道，分别对应mic2、
# mic3、mic0、mic1,音频中0至3通道为参考通道，分别对应左低音、右低音、左高音、右高音参考。现在需要选择4个mic出来，排成mic0至mic3的顺序，
# 再将左声道高低音参考，右声道高低音参考分别合并起来，做4mic和2参考的处理，则相应的参数为：
# nummics = 4
# numrefs = 2
# numpilots = 0
# numins = 8
# chorder = 6,7,4,5,2+0,3+1
#
chorder =

# 输出通道数
numouts = ${validate_numouts}

# 保存输入给前端的音频（pcm, wav）路径，用于debug。参数值为空表示不保存debug音频。
fe_in_path = 

# 保存前端输出音频（pcm, wav）的路径，用于debug。参数值为空表示不保存debug音频。
fe_out_path = 

# 日志级别。0：关闭日志，1：error，2：warning，3：info。
log_level = 2

#
# 各个MIC的坐标，每行为一个(x, y, z)坐标，单位为米，每个坐标用一个逗号隔开。麦克风阵列坐标系定义见下面声源定位部分。
# MIC坐标的个数和nummics须保持一致。
#
mic_coor = 
0.0,-0.05,0.0
0.0,0.05,0.0

#
# 工作模式
# 3 (MODE_TEST): 测试模式，用于检测信号质量。具体相关参数见下面的信号测试部分。
# 4 (MODE_GENERAL): 通用模式，若无特殊说明则推荐使用该模式。
# 9 (MODE_MULTISTREAM): 多流模式，采用多种手段进行增强。
#
mode = 4

# 在某些工作模式中需要设置嵌套的子模式。
submode = 4

# 用于初始化的音频长度（秒）。在初始化期间内，音量将从最小值逐渐增至正常，以防止冷启动时带来的破音。
init_time = 0.0

# 
# 在大多数情况下，信号中存在100Hz以下的电路噪声，而语音的有效成分往往要大于100Hz，所以可以使用高通滤波去除低频的噪声成分。
# 该参数控制高通滤波的程度，参数取值从0到10，0表示关闭高通滤波，而1到10中，值越大表示高通滤波的截止频率越高。
#
hpf_power = 4

# 截幅检测阈值（dB），0表示关闭截幅检测。截幅音频会对某些算法造成影响，开启截幅检测使得算法能够对截幅数据作出应对措施。
saturation_level = 0.0


##############################
#
# AEC相关参数
#

#
# AEC算法
# 0 (AEC_ALG_BYPASS): 不做任何处理。
# 100: 
# 201: AEC_ALG_LX_GENERAL
#
aec_algorithm = 400

# 该参数控制AEC算法中滤波器的长度，0为使用默认值。回声路径越长，需要的滤波器越长，计算量越大，收敛速度越慢。
aec_power = 0

# 二级滤波器长度，-1表示使用默认值。
aec_power2 = -1

# 该参数（>=0）用于控制语音失真程度，参数值越大对回声的抑制能力越强，然而对语音造成的失真也越大。
aec_level = 0.0

# 遗忘因子，取值范围[0, 1]，0为使用默认值。遗忘因子越大迭代越稳定，但对外界变化的跟踪速度越慢。
aec_forget = 0.0

# AEC内部增益（dB），用于在AEC之后调整信号增益防止下溢。
aec_gain = 6.0

#
# 当该参数非0时表示使用固定的参考延时（秒）。例如，当该参数为0.1时表示把参考提前0.1秒，当该参数为-0.1时
# 表示把参考推迟0.1秒。
#
aec_tde_refoffset = 0.0

#
# 当MIC通道和参考通道不同步时（通常发生在软取参考的方案中），需要开启延时估计，以保证数据的同步性。
#
# 自动延时估计所支持的最大偏移量（秒），负数表示自动延时估计关闭，0表示使用默认值。最大偏移量越大，延时估计所
# 能修正的偏移范围也越大，但内存开销也越大，延时估计的更新频率也越慢。
#
aec_tde_maxoffset = -1.0


##############################
#
# 去混响相关参数
#

# 0 (DR_ALG_BYPASS): 不做任何处理。
# 1 (DR_ALG_BASIC): 基础去混响算法。
#
dr_algorithm = 0

# 去混响滤波器长度，0表示使用默认值。
dr_power = 0

# 进一步的去混响配置模式，0表示使用默认值。
dr_level = 0.0


##############################
#
# Beamforming相关参数
#

#
# Beamforming算法
# 0 (BF_ALG_BYPASS): 不做任何处理。
# 1 (BF_ALG_FIXED): 固定波束形成。
# 301 (BF_ALG_DOMINANT_PILOT): 基于外部监督信息的波束形成算法。
# 403 (BF_ALG_STEREO_BSS_V4): 两通道盲源分离。
# 500 (BF_ALG_BSS_GENERAL): 多通道盲源分离。
#
bf_algorithm = 501

# 该参数控制BF算法中滤波器的长度，0为使用默认值。环境混响越大，需要的滤波器越长，计算量越大，收敛速度越慢。
bf_power = 0

# 本参数用于平衡噪声抑制和语音失真。该参数越大则噪声抑制效果越明显，但同时语音失真也越大。
bf_level = 0.0

# 初始波束方位角（-180度到180度）。各个数值用英文逗号（,）隔开，最多可以有numouts个数值。
bf_lookaz = 0.0

# 初始波束仰角（-90度到90度）。各个数值用英文逗号（,）隔开，最多可以有numouts个数值。
bf_lookel = 0.0

# 是否在初始化时将波束设置为锁定状态。波束锁定的方位角为初始波束指向。
bf_islocked = 0

# 波束形成模型文件路径
bf_model_base = 


##############################
#
# 噪声抑制（Noise Suppression）相关参数
#

#
# NS算法
# 0 (NS_ALG_BYPASS): 不做任何处理。
# 1 (NS_ALG_RES_BASIC): 基于信号处理的AEC后滤波方法。
# 100 (NS_ALG_RES_NNMASK): NNMask直接用于AEC后滤波。
# 101 (NS_ALG_RES_NNRES): NNMask与信号相结合的AEC后滤波。
#
ns_algorithm = 0

# 滤波器的长度，0为使用默认值。
ns_power = 0

# 该参数用于控制语音失真程度，0.0表示使用默认值。
ns_level = 0.0

# NS模型路径
ns_model_base = 


##############################
#
# 后滤波（Postfiltering）相关参数
# 后滤波用于对输出信号的残余做进一步的抑制，以防止后端VAD或识别器被误触发。
#

#
# 后滤波算法
# 0 (PF_ALG_BYPASS): 不做任何处理。
# 1 (PF_ALG_VAD): 根据前端VAD的信息来做后滤波。
#
pf_algorithm = 0

# 对非目标语音做后滤波的抑制系数。
pf_level = 0.3


##############################
#
# 增益控制（AGC）相关参数
#

#
# AGC算法
# 0 (AGC_ALG_BYPASS): 不做任何处理。
# 1 (AGC_ALG_BASIC): 基本AGC方法。
#
agc_algorithm = 1

# AGC增益自适应更新的速度，值越大更新速度越快。
agc_power = 8

# 增益调整之后的幅度，0dB（满幅）以下的dB值。参数值从0到31。
agc_level = 4


##############################
#
# 音量计算相关参数
#
# 实时音量大小可以通过float volume(int n)函数取得。
#

#
# 音量的类型
# 0: 音量计算关。
# 1: average RMS (Root Mean Square)
# 2: peak RMS
# 3: normalized average RMS，取值范围从0到100
# 4: normalized peak RMS，取值范围从0到100
#
volume_algorithm = 0

#
# 计算音量的位置
# 0: 原始音的音量
# 1: 在AGC之前的音量
# 2: 在AGC之后的音量
#
volume_position = 0


##############################
#
# 声源定位相关参数
#
# 方位角范围从-180度到180度，仰角范围从-90度到90度。
# 方位角坐标系：
#
#                   -180度（180度）
#                         ^
#                         |-x
#                         |
#                         |
#                         |
#                         |   麦克风阵列示例
#                         |  /
#         -y              | v            y
#  -90度 <-------------o-o-o-o------------> 90度
#              （z轴正方向指向屏幕外）
#                         |
#                         |
#                         |
#                         |
#                         |
#                         |x
#                         v
#                        0度
#
#                         ^
#                         |
#                     目标 声源
#

#
# 声源定位算法
# 0 (SSL_ALG_BYPASS): 不做任何处理。
# 1 (SSL_ALG_BASIC): 基本声源定位算法。
# 100 (SSL_ALG_POST): 配合BF进行多声源定位。
#
ssl_algorithm = 0

#
# 声源定位日志类型。该参数只影响离线处理工具，不影响正常通过函数库调用的流程。
# 0: 声源定位日志关闭；
# 1: 实时声源定位结果，各个通道的方位角和仰角；
# 2: 分段定位结果，即一个文件（短音频）处理完后再输出一个最终的结果。
#
ssl_log_level = 0

# 扫描方向（按360度算）。扫描方向越多定位精度越高，但计算量也越大。
ssl_numscans = 36

# 当阵列为线性阵时，开启此项将定位角度限定在[-90, 90]内，否则输出角度范围为[-180, 180]。
ssl_halfscan = 0

#
# 声源的仰角，[-90, 90]（度），默认为0。在通常情况下，声源和阵列基本位于同一平面上，所以可以使用默认参数。
# 但是对于某些特殊应用，例如扫地机器人，声源显然和阵列平面差距较大，此时为了提高定位精度可以设置此参数为
# 和应用相关的某个经验值，例如45。
#
ssl_el = 0.0

#
# 遗忘因子，范围[0, 1]。遗忘因子越小跟踪速度越快，但定位越不稳定。可以根据具体应用中声源移动的快慢来调节该参数。
# 在分段定位中，遗忘因子必须等于1，在跟踪定位中，遗忘因子必须小于1。跟踪定位中遗忘因子的默认值为0.99。
#
ssl_forget = 1.0

# 定位所使用的频率比例范围[0, 1]，使用英文逗号（,）隔开，0为使用默认值。
ssl_freq_range = 0.0,0.0


##############################
#
# 前端VAD相关参数
#

#
# VAD算法
# 0 (VAD_ALG_BYPASS): 不做任何处理。
# 1 (VAD_ALG_PHASE): 基于相位差的VAD。
# 2 (VAD_ALG_DOMINANT): 基于主声源的VAD。
# 3 (VAD_ALG_PILOT): 直接使用多模态信息作为VAD信息。
# 4 (VAD_ALG_KWS): 使用唤醒词反馈的信息作为VAD。
# 100 (VAD_ALG_RNNOISE): 基于NNMask的VAD。
#
vad_algorithm = 0

# 特征类型。
vad_feat_type = 0

#
# VAD日志类型。该参数只影响离线处理工具，不影响正常通过函数库调用的流程。
# 0: VAD日志关闭；
# 1: 实时目标存在概率（vadProb）；
# 2: VAD判决（vadIsActive）。
#
vad_log_level = 0

# 用于目标/非目标判断的阈值，0表示使用默认阈值。
vad_level = 0.0

# VAD的遗忘因子，范围[0, 1]，0表示使用默认值。遗忘因子越小跟踪速度越快，但结果越不稳定。
vad_forget = 0.0

# 基于方位角的目标半径（角度），认为当前声源方向及该半径内的声源为目标声源，否则为干扰声源。
vad_target_radius = 20.0

# 用于目标/干扰判断的VAD中的信噪比阈值，0为使用默认值。
vad_min_snr = 0.0

# 目标的最小方差，0为使用默认值。
vad_min_tvar = 0.0

# 噪声和干扰的最小方差，0为使用默认值。
vad_min_nvar = 0.0

#
# 语音起点的最小长度（秒）。当检测到的语音起点小于该长度时将视为非语音。由于出现了等待，所以会增加
# vadIsActive函数检测到语音起点的延时。
#
vad_min_tsize = 0.1

#
# 对语音起点的放松长度（秒）。由于前端系统不缓存数据，真正的语音起点比vadIsActive返回的语音起点
# 要提前vadHangbefore秒，需要用户自己在调用逻辑中实现缓存，并根据vadIsActive和vadHangbefore函数
# 寻找真正的语音起点。
#
vad_hangbefore = 0.5

# 当检测到语音结束后触发vadIsActive函数置0的等待时间（秒），以防止语音被误截断。
vad_hangover = 0.5

# VAD或Mask模型的路径。
vad_model_base = 


##############################
#
# 关键词（唤醒词）检测（Keyword Spotting）相关参数
#

#
# 关键词检测算法
# 0 (KWS_ALG_BYPASS): 不做任何处理。
# 1 (KWS_ALG_BASIC): 基本算法。
# 2 (KWS_ALG_ATTENTION): 基于注意机制的算法。
#
kws_algorithm = 5

# 特征类型。
kws_feat_type = 0

#
# 唤醒日志类型。
# 0: 关闭日志；
# 2: 长语音唤醒日志；
# 3: 长语音唤醒日志 + runtime状态；
# 4: 实时关键词存在概率。
#
kws_log_level = ${kws_log_level}

# 是否开启防止语音播报关键词时发生自唤醒的功能，0：关闭，1：开启。
kws_block_selfwake = 0

# 关键词短音频输出目录，用于debug。参数值为空表示不保存debug音频。音频格式为pcm，通道数为numouts + numrefs。
kws_out_path = 

# 解码器稀疏化策略，取值0, 1, 2，数值越大稀疏程度越高，但也越容易产生虚警。
kws_decode_sparsity = 0

#
# 解码规则描述。例如关键词为：你好小明、打开电视、关闭电视，则解码描述可写为如下格式：
#
# kws_decode_desc = 
# 0_ni_hao_xiao_ming,1,2,3,4
# 1_da_kai_dian_shi,5,6,7,8
# 2_guan_bi_dian_shi,9,10,7,8
#
# 分隔符为逗号。其中第一个字符串为对应的关键词，可以自由定义。后面的数字为该关键词对应的解码器状态序列，由唤醒模型决定。
# 该参数也同时决定关键词的数目。
#
kws_decode_desc = 
${kws_decode_desc}

#
# 关键词检测策略。可以为每个关键词分别配置检测策略，各个策略用逗号隔开。
# 0: 十个建模单元以内的通用检测策略；
# 1, 2: 检测格式为ABCD的序列；
# 3, 4: 检测格式为ABAB的序列；
# 10: 考虑了序列顺序的检测策略，支持十个建模单元以内的检测；
#
kws_detection_policy = 1

# 唤醒阈值。可以为每个关键词分别设置阈值，各个阈值用逗号隔开。
kws_level = ${kws_level}

# 次级唤醒阈值。
# kws_level2 = 0.01

# 夜间模式唤醒阈值。允许设置一组更严格的阈值来进一步减少夜间误唤醒。
kws_night_level = 0.96

# 唤醒模型路径。
kws_model_base = ${kws_model}

##############################
#
# 信号测试相关参数
#
# 测试模式主要用于设备生产时候的信号质量检测，只有当工作模式设置为测试模式时（mode = MODE_TEST）才能进行检测。
#

#
# 测试项目，除直通模式外可多选，每个项目代号之间用英文逗号（,）隔开。
# 0 (TEST_BYPASS): 直通模式，除去了降采样、高通滤波、延时估计之外的所有操作，输出为16k的mic和参考信号，用于后续的检测。
#                  此模式下numouts须设置为nummics+numrefs。
# 1 (TEST_BYPASS_MIC): 直通模式，只输出mic信号，numouts须设置为nummics。
# 2 (TEST_BYPASS_REF): 直通模式，只输出参考信号，numouts须设置为numrefs。
#
# 信号基础测试，包含以下项目：
# 100 (TEST_SATURATION): 截幅检测，用检测信号是否存在大量截幅的情况。
# 101 (TEST_DISCONTINUITY): 信号断点检测，用于检测信号是否存在大量不连续或中断的情况。
# 102 (TEST_SIMILARITY): 信号相似度检测，用于防止两个通道的信号完全相同。
# 103 (TEST_AMP_DIFF): 幅度差异性检测，用于保证各通道信号的幅度偏差在一定范围内。
# 104 (TEST_PHASE_DIFF): 相位差异性检测，用于检测多通道信号之间是否存在延时偏差。
# 105 (TEST_FREQ): 频响测试，检测各个mic的频响是否差异过大和是否在指定的区间内。
#
# AEC相关检测，包含以下项目：
# 200 (TEST_ERLE): 计算AEC的ERLE（Echo Return Loss Enhancement）,从而预估AEC的性能。
# 201 (TEST_REF_OFFSET): 打印mic信号和参考信号之间的延时。
#
test_items = 0

# 判断是否截幅的阈值[0, 1]，信号幅度绝对值大于该阈值时认为出现截幅。
test_saturation_level = 0.99

# 截幅率阈值，当截幅率大于该阈值时判定为不合格。
test_max_saturation_rate = 0.01

# 判定信号断点的阈值，当信号梯度大于梯度标准差的该倍数时认为出现断点。
test_discontinuity_level = 3.0

# 中断率阈值，当中断率大于该阈值时判定为不合格。
test_max_discontinuity_rate = 0.01

# 信号相似度阈值，当两路信号的相似度大于该阈值时判定为不合格。
test_max_similarity = 0.99

# 幅度差异性阈值，当两路信号的幅度差异超过该阈值时判定为不合格。
test_max_amp_diff_rate = 0.03

# 两个mic频响曲线间的最小相似度，当两个频响曲线的相似度小于该阈值时判定为不合格。
test_freqdb_min_similarity = 0.9

# Mic频响曲线（dB）的下界，一共160个频段，每个频段用英文逗号（,）隔开。
test_freqdb_lower = 

# Mic频响曲线（dB）的上界，一共160个频段，每个频段用英文逗号（,）隔开。
test_freqdb_upper = 


##############################
#
# 模型训练相关参数
#

#
# 对于短语音，需要重复过前端数次（例如5次），使得前端算法收敛后才能得到稳定的结果。该参数用于设置语音文件重复
# 过前端的次数，而输出文件只会保留最后一次的结果。该参数只对离线工具起作用。
#
train_repeat = 1

# 输入音频的偏移量（秒）。该参数只对离线工具起作用。
train_input_offset = 0.0

# 输入音频的长度（秒），0为整个音频文件的长度。该参数只对离线工具起作用。
train_input_len = 0.0

# 数据模拟中每个场景的时长（秒）。
train_batch_size = 60.0

# 数据模拟时的随机数种子，0表示使用系统的随机种子。
train_rand_seed = 0

# 多线程worker id。
train_worker_id = 0

#
# 传函模拟
#

# 声速波动范围（米/秒）。
train_sound_speed_range = 339.0,343.0

# 虚拟房间长度（x方向）范围（米）。
train_roomx_range = 3.0,10.0

# 虚拟房间宽度（y方向）范围（米）。
train_roomy_range = 3.0,8.0

# 虚拟房间高度（z方向）范围（米）。
train_roomz_range = 2.5,6.0

# 虚拟声源高度范围（米）。
train_sourcez_range = 1.0,2.0

# 虚拟接收设备高度范围（米）。
train_receiverz_range = 0.5,1.5

# 声源到接收设备的水平距离范围（米）。
train_distance_range = 0.5,8.0

# 声源和接收设备距离水平墙面的最小间距（米）。
train_min_spacing = 0.3

# 传函模拟中的RT60范围（秒）。
train_rt60_range = 0.2,2.0

# 传函模拟中对坐标的随机扰动的标准差（米）。
train_coor_stddev = 0.0

# 模拟传函输出路径，若该参数非空则保存模拟传函到相应的目录下。
train_rir_out_path = 

#
# 目标语音模拟
#

#
# 目标说话人关键词音源列表。
#
# 格式为：“列表文件路径,抽样权重,标签映射”，例如：
# train_pos_list = 
# /yourpath/keyword1.txt,0.6,l1_l2_l3_l4
# /yourpath/keyword2.txt,0.4,l5_l6_l7
# ...
#
# 其中标签映射用于将原始标签映射为新的标签，以解决不同模型中标签定义不同的问题。例如音源中的原始标签为1_2_1_2，
# 而当前模型中要求将建模单元的标签定义为1_2_3_4，则在训练数据中将使用新标签代替原始标签。
#
# 其它train_xxx_list参数无须标签映射，格式为：“列表文件路径,抽样权重”，如果权重为0则默认使用列表中数据的数目作为权重。
#
train_pos_list = 

# 该参数为1表示正样本短语句为特征文件，0为音频文件。特征文件只支持单通道数据模拟。
train_isposfeat = 0

# 正样本随机语速调整范围（倍速），支持[0.8, 1.2]区间，0.0,0.0表示语速不变。
train_speed_range = 0.8,1.2

# 目标说话人非关键词音源列表。
train_neg_list = 

# 关键词在目标语音中出现的比例范围。
train_pos_ratio_range = 0.5,0.7

# 在目标语音短句之间插入的随机空白范围（秒）。
train_target_blank_range = 1.0,3.0

# 关键词标签的扰动范围（秒），负数表示标签提前，正数表示标签延后。该参数同步影响force align标签和VAD标签。
train_label_offset_range = 0.0,0.1

# 关键词ABCD等概率变异为AB、BC、CD这类二元组的比例，用于防止模型过拟合到ABCD这种组合上。
train_2gram_ratio = 0.0

#
# 将关键词建模单元顺序重新组合，变异为混淆词并作为负样本的比例。例如当前batch中正样本比例为0.7，混淆词汇比
# 例率为0.06，则混淆词汇在batch中出现的比例为：(1 - 0.7) x 0.06 = 0.018。
#
train_confuse_ratio = 0.0

#
# 混淆词生成规则描述，建模单元索引加逗号分隔符的格式。例如关键词为ABCD，
# train_confuse_desc = 
# 0,1,0,1
# 1,2,1,2
# 2,3,2,3
# 
# 则在生成混淆词时会等概率生成：ABAB, BCBC, CDCD
#
train_confuse_desc = 
0,1
1,2
2,3
0,1,0,1
1,2,1,2
2,3,2,3
3,2,1,0
2,3,0,1

# 目标语音传函列表，若该参数为空则使用动态模拟的传函，否则使用列表中的传函。
train_target_rir_list = 

#
# 干扰模拟
#

# 干扰音源列表。
train_interf_list = 

# 干扰声源数目范围。
train_numinterfs_range = 1,1

# 在干扰语音短句之间插入的随机空白范围（秒）。
train_interf_blank_range = 1.0,3.0

# 信干比区间（dB）。
train_sir_range = -5.0,20.0

# 干扰声源传函列表，若该参数为空则使用动态模拟的传函，否则使用列表中的传函。
train_interf_rir_list = 

#
# 回声模拟
#

# 参考音源列表。
train_ref_list = 

#
# 回声类型。
# 0：通过参考+回声路径模拟回声。
# 1：直接使用实录参考和回声。
#
train_echo_type = 0

# 模拟扬声器坐标。每行为一个(x, y, z)坐标，单位为米，每个坐标用一个逗号隔开。坐标的个数和numrefs须保持一致。
train_loudspeaker_coor = 
0.0,0.0,-0.01

# 在参考信号之间插入的随机空白范围（秒）。
train_ref_blank_range = 1.0,3.0

# 信回比区间（dB）。
train_ser_range = -20.0,5.0

# 回声路径列表，若该参数为空则使用动态模拟的传函，否则使用列表中的传函。
train_echo_path_list = 

#
# 噪声模拟
#

# 1号噪声音源列表。
train_noise1_list = 

#
# 2号噪声音源列表，与1号列表配合使用，用于生成不同类型的噪声。
# 例如1号列表（单通道音源）用于生成模拟噪声，而2号列表（多通道音源）用于载入实际噪声。
#
train_noise2_list = 

#
# 1号噪声类型。
# 0：直接使用单通道噪声数据。
# 1：直接使用多通道噪声数据（通道数为nummics）。
# 21：环状散射模型。
# 31：柱面散射模型。
# 41, 42, 43：球面散射模型。档位越高模拟越精确，计算量越大。
#
train_noise1_type = 0

# 2号噪声类型。
train_noise2_type = 0

# 1号噪声类型在噪声模拟中所占的比例。
train_noise1_ratio = 1.0

# 信噪比区间（dB）。
train_snr_range = -5.0,20.0

# 底噪阈值（dB），语音能量小于该阈值时认为是底噪，不计入信噪比计算。
train_noise_floor = -55.0

#
# 音量和增益
#

# 数据模拟中的音量区间（average RMS, dB）。
train_volume_range = -45.0,-15.0

# 背景噪声音量区间（average RMS, dB）。只有在非散射噪声场景时才会加入背景噪声，-100以下表示不加背景噪声。
train_bgvolume_range = -85.0,-80.0

# 麦克风增益波动范围（dB）。
train_micgain_range = 0.1,2.0

#
# 数据模拟场景描述。格式为：目标语音,点声源干扰,回声,散射噪声,场景权重
# 例如，需要配置的场景为：
# 静音场景：0.02
# 纯噪声场景：0.03
# 安静场景：0.05
# 语音+点声源干扰：0.4
# 语音+回声：0.4
# 语音+点声源干扰+回声：0.1
# 
# 则参数配置为：
# train_scene_desc = 
# 0,0,0,0,0.02
# 0,0,0,1,0.03
# 1,0,0,0,0.05
# 1,1,0,0,0.4
# 1,0,1,0,0.4
# 1,1,1,0,0.1
#
train_scene_desc = 
0,0,0,0,0.02
0,0,0,1,0.03
1,0,0,0,0.05
1,0,0,1,0.90
